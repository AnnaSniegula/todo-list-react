{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/List/styled.js","routes.js","features/tasks/TasksPage/List/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/Search/styled.js","features/tasks/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","Navigation/index.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js","theme.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","theme","colors","grey","StyledContainer","styled","main","Container","children","Header","title","StyledSection","section","white","header","breakpoints","mobile","StyledTitle","h2","tasks","css","Section","body","extraHeaderContent","AuthorPage","StyledForm","form","FormButton","input","button","teal","localStorageKey","saveTasksInLocalStorage","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","taskObject","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreAllTasksDone","every","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","value","type","placeholder","onChange","target","TasksList","ul","Item","li","hidden","Content","span","Button","toggleDone","green","remove","red","toTask","List","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","task","onClick","to","ButtonsContainer","div","darkGrey","Buttons","areAllTasksDone","length","disabled","Wrapper","history","useHistory","searchQueryParamName","searchParams","delete","set","pathname","toString","TasksPage","Search","TaskPage","useParams","find","getTaskById","Navigation","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHendler","saveTasksInLocalStorageHandler","tasksSaga","call","exampleTasks","put","alert","select","takeLatest","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.a903f37d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: ${({ theme }) => theme.colors.grey};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    font-family: 'Lato', sans-serif;\r\n    margin: 0 auto;\r\n    max-width: 800px;\r\n    padding: 20px;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;\r\n","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const Header = styled.header`  \r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    border-bottom: 2px solid ${({theme}) => theme.colors.grey};\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;  \r\n    }\r\n`;\r\n\r\nexport const StyledTitle = styled.h2`\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    padding: 30px;\r\n    margin-bottom: 2px;\r\n\r\n    ${({tasks}) => tasks && css`\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        padding: 0px 20px;\r\n    `}\r\n`;","import { Header, StyledSection, StyledTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <StyledTitle tasks>{title}</StyledTitle>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport const AuthorPage = () => (\r\n    <Container>\r\n        <Header title=\"O autorze\" />\r\n        <Section title=\"Anna Śnieguła\"\r\n            body={<>nana</>}\r\n        />\r\n    </Container>\r\n);\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    border: 0px;\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    @media(max-width:${({theme}) => theme.breakpoints.mobile}px) {\r\n        flex-direction: column;  \r\n    }\r\n`;\r\n\r\nexport const Input = styled.input` \r\n    border: 2px solid ${({theme}) => theme.colors.grey};\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    background-color: ${({theme}) => theme.colors.teal};\r\n    color: ${({theme}) => theme.colors.white};\r\n    padding: 10px;\r\n    border: none;\r\n    font-size: 15px;\r\n    margin: 10px;\r\n    cursor: pointer;\r\n    transition: 0.5s linear;\r\n\r\n    &:hover {\r\n        filter: brightness(110%); \r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(130%); \r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: taskObject }) => {\r\n            tasks.push(taskObject);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: () => { },\r\n\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreAllTasksDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state)\r\n    if (!query || query === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.toUpperCase()));\r\n};\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input` \r\nborder: 2px solid ${({theme}) => theme.colors.grey};\r\npadding: 10px;\r\nflex-grow: 1;\r\nmargin: 10px;\r\n`;","import { useState, useRef } from \"react\";\r\nimport { StyledForm, FormButton } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (newTaskContent.trim() === \"\") {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: newTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <FormButton>Dodaj zadanie</FormButton>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    padding: 30px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`  \r\n    border-bottom: 1px solid ${({theme}) => theme.colors.grey};\r\n    display: grid;\r\n    align-items: center;\r\n    padding: 5px;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 15px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    color: ${({theme}) => theme.colors.white};\r\n    margin: 5px;\r\n    text-align: center;\r\n    transition: 0.5s linear;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n    background-color: ${({theme}) => theme.colors.green};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(130%); \r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n    background-color: ${({theme}) => theme.colors.red};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n\r\n        &:active {\r\n            filter: brightness(130%); \r\n        }\r\n    `}\r\n`;\r\n\r\n\r\n\r\n","export const toTasks = () => \"/zasania\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;\r\n\r\n","import { TasksList, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleTaskDone,\r\n  removeTask,\r\n  selectHideDone,\r\n  selectTasksByQuery\r\n} from \"../../tasksSlice\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { toTask } from \"../../../../routes\";\r\n\r\n\r\nconst List = () => {\r\n  const location = useLocation();\r\n  const query = (new URLSearchParams(location.search)).get(\"szukaj\");\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <TasksList>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✓\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <Link to={toTask({ id: task.id })}>{task.content}</Link>\r\n          </Content>\r\n          <Button remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </TasksList >\r\n  );\r\n\r\n};\r\nexport default List;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div` \r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    color: ${({theme}) => theme.colors.teal};\r\n    transition: color 0.3s;\r\n    border: none;\r\n    cursor: pointer;\r\n   \r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        flex-direction: column;\r\n        padding: 10px;\r\n        align-items: center;  \r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({theme}) => theme.colors.darkGrey};\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectTasks,\r\n    toggleHideDone,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    selectHideDone,\r\n    selectAreAllTasksDone,\r\n} from \"../../tasksSlice\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areAllTasksDone = useSelector(selectAreAllTasksDone);\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <ButtonsContainer>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                Pobierz przykładowe zadania\r\n            </Button>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())} >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={areAllTasksDone}\r\n                    >\r\n                        Ukończ wszytkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsContainer>\r\n    );\r\n};\r\n\r\n\r\nexport default Buttons;","export default \"szukaj\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\npadding: 20px;\r\n`;","import { useLocation, useHistory } from \"react-router\";\r\nimport Input from \"../Input\";\r\nimport searchQueryParamName from \"../TasksPage/searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\n\r\nexport default () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n    const onInputChange = ({ target }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n        if (target.value === \"\") {\r\n            searchParams.delete(searchQueryParamName);\r\n        } else {\r\n            searchParams.set(searchQueryParamName, target.value);\r\n        };\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};","import Form from \"./Form\";\nimport List from \"./List\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"../Search\";\n\n\nexport const TasksPage = () => {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n       <Section title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section title=\"Lista zadań\"\n        body={<List />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n};\n\n\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\"\r\n\r\nexport const TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            <Section title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={!!task && (\r\n                    <>\r\n                        <strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n                    </>\r\n                )}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\n","import { toAuthor, toTasks } from \"../routes\";\r\nimport { List, StyledNavLink, Item } from \"./styled\";\r\n\r\nexport default () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { AuthorPage } from \"./features/author/AuthorPage\";\r\nimport { TasksPage } from \"./features/tasks/TasksPage\";\r\nimport { TaskPage } from \"./features/tasks/TaskPage\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n        <Switch>\r\n            <Route path={toTask()}>\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path={toTasks()}>\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path={toAuthor()}>\r\n                <AuthorPage />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Redirect to={toTasks()} />\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n);","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeEvery, takeLatest, call, put, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHendler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks))\r\n    } catch (error) {\r\n        yield call(alert, \"Cos poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHendler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n import createSagaMiddleware from '@redux-saga/core';\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\n const sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme.js\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors:{\r\n     white:\"hsl(0, 0%, 100%)\",  \r\n     grey:\"hsl(0, 0%, 93%)\",\r\n     darkGrey: \"hsl(0, 0%, 80%)\",\r\n     teal:\"hsl(180, 100%, 25%)\",\r\n     green:\"hsl(120, 100%, 25%)\",\r\n     red:\"hsl(0, 100%, 50%)\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 767\r\n    },\r\n};"],"sourceRoot":""}