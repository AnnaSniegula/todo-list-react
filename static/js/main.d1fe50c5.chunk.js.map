{"version":3,"sources":["Form/index.js","List/styled.js","List/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","type","placeholder","onChange","target","TasksList","styled","ul","Item","li","hidden","css","Content","span","done","Button","button","toggleDone","remove","List","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","tasksFromLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1fe50c5.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (newTaskContent.trim() === \"\") {\r\n      return;\r\n    }\r\n    addNewTask(newTaskContent);\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newTaskContent}\r\n        className=\"form__input\"\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n      />\r\n      <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    background-color: hsl(0, 0%, 100%);\r\n    padding: 30px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`  \r\n    border-bottom: 1px solid hsl(0, 0%, 93%);\r\n    display: grid;\r\n    align-items: center;\r\n    padding: 5px;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 15px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    color: hsl(0, 0%, 100%);\r\n    margin: 5px;\r\n    text-align: center;\r\n    transition: 0.5s linear;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n    background-color: hsl(120, 100%, 25%);\r\n\r\n        &:hover {\r\n            background-color: hsl(120, 100%, 35%);\r\n        }\r\n\r\n        &:active {\r\n            background-color: hsl(120, 100%, 25%);\r\n        }\r\n\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n    background-color: hsl(0, 100%, 50%);\r\n\r\n        &:hover{\r\n            background-color: hsl(0, 100%, 60%); \r\n        }\r\n\r\n        &:active{\r\n            background-color: hsl(0, 100%, 70%); \r\n        }\r\n\r\n    `}\r\n\r\n`;\r\n\r\n\r\n\r\n","import { TasksList, Item, Content, Button } from \"./styled\";\r\n\r\nconst List = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <TasksList>\r\n    {tasks.map(task => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n       >\r\n    <Button toggleDone\r\n      onClick={() => toggleTaskDone(task.id)}\r\n    >\r\n      {task.done ? \"âœ“\" : \"\"}\r\n    </Button>\r\n    <Content done={task.done}>\r\n      {task.content}\r\n    </Content>\r\n    <Button remove\r\n      onClick={() => removeTask(task.id)}\r\n    >\r\n      ðŸ—‘\r\n    </Button>\r\n      </Item>\r\n))}\r\n  </TasksList >\r\n);\r\n\r\nexport default List;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button onClick={toggleHideDone} className=\"buttons\">\r\n                    {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n                </button>\r\n                <button\r\n                    onClick={setAllDone}\r\n                    className=\"buttons\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    UkoÅ„cz wszytkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h1 className=\"section__title--tasks\">{title}</h1>\r\n            {extraHeaderContent}\r\n        </header>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;\r\n","import Form from \"./Form\";\nimport List from \"./List\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const getInitialTasks = () => {\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n    return tasksFromLocalStorage ? JSON.parse(tasksFromLocalStorage)\n      : []\n  };\n\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks))\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id))\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task\n    }));\n  }\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task, done: true,\n    })))\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n      },\n    ]);\n  };\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Section title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section title=\"Lista zadaÅ„\"\n        body={\n          <List tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}