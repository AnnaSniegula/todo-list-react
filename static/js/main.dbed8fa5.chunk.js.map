{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/List/styled.js","features/tasks/List/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","store.js","index.js","theme.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","theme","colors","grey","StyledForm","styled","form","white","breakpoints","mobile","Input","input","FormButton","button","teal","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","value","type","placeholder","onChange","target","TasksList","ul","Item","li","hidden","css","Content","span","Button","toggleDone","green","remove","red","List","useSelector","map","onClick","ButtonsContainer","div","darkGrey","Buttons","length","disabled","every","StyledSection","section","Header","header","StyledTitle","h2","Section","title","body","extraHeaderContent","StyledContainer","main","Container","children","Tasks","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById"],"mappings":"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","file":"static/js/main.dbed8fa5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: ${({ theme }) => theme.colors.grey};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    border: 0px;\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    @media(max-width:${({theme}) => theme.breakpoints.mobile}px) {\r\n        flex-direction: column;  \r\n    }\r\n`;\r\n\r\nexport const Input = styled.input` \r\n    border: 2px solid ${({theme}) => theme.colors.grey};\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    background-color: ${({theme}) => theme.colors.teal};\r\n    color: ${({theme}) => theme.colors.white};\r\n    padding: 10px;\r\n    border: none;\r\n    font-size: 15px;\r\n    margin: 10px;\r\n    cursor: pointer;\r\n    transition: 0.5s linear;\r\n\r\n    &:hover {\r\n        filter: brightness(110%); \r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(130%); \r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload)\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload)\r\n            state.tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({tasks}) => {\r\n            for(const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, FormButton } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (newTaskContent.trim() === \"\") {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: newTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <FormButton>Dodaj zadanie</FormButton>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    padding: 30px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`  \r\n    border-bottom: 1px solid ${({theme}) => theme.colors.grey};\r\n    display: grid;\r\n    align-items: center;\r\n    padding: 5px;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 15px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    color: ${({theme}) => theme.colors.white};\r\n    margin: 5px;\r\n    text-align: center;\r\n    transition: 0.5s linear;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n    background-color: ${({theme}) => theme.colors.green};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(130%); \r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n    background-color: ${({theme}) => theme.colors.red};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n\r\n        &:active {\r\n            filter: brightness(130%); \r\n        }\r\n    `}\r\n`;\r\n\r\n\r\n\r\n","import { TasksList, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\n\r\nconst List = () => {\r\n  const {tasks, hideDone} = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\nreturn (\r\n  <TasksList>\r\n    {tasks.map(task => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n      >\r\n        <Button toggleDone\r\n          onClick={() => dispatch(toggleTaskDone(task.id))}\r\n        >\r\n          {task.done ? \"✓\" : \"\"}\r\n        </Button>\r\n        <Content done={task.done}>\r\n          {task.content}\r\n        </Content>\r\n        <Button remove\r\n          onClick={() =>dispatch(removeTask(task.id))}\r\n        >\r\n          🗑\r\n        </Button>\r\n      </Item>\r\n    ))}\r\n  </TasksList >\r\n);\r\n\r\n};\r\nexport default List;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div` \r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    color: ${({theme}) => theme.colors.teal};\r\n    transition: color 0.3s;\r\n    border: none;\r\n    cursor: pointer;\r\n   \r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        flex-direction: column;\r\n        padding: 10px;\r\n        align-items: center;  \r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({theme}) => theme.colors.darkGrey};\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <ButtonsContainer>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())} >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        Ukończ wszytkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsContainer>\r\n    );\r\n};\r\n\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({theme}) => theme.colors.white};\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const Header = styled.header`  \r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    border-bottom: 2px solid ${({theme}) => theme.colors.grey};\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;  \r\n    }\r\n`;\r\n\r\nexport const StyledTitle = styled.h2`\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    padding: 30px;\r\n    margin-bottom: 2px;\r\n\r\n    ${({tasks}) => tasks && css`\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        padding: 0px 20px;\r\n    `}\r\n`;","import { Header, StyledSection, StyledTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <StyledTitle tasks>{title}</StyledTitle>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    font-family: 'Lato', sans-serif;\r\n    margin: 0 auto;\r\n    max-width: 800px;\r\n    padding: 20px;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;\r\n","import Form from \"./Form\";\nimport List from \"./List\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section title=\"Lista zadań\"\n        body={<List />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n};\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n \r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme.js\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors:{\r\n     white:\"hsl(0, 0%, 100%)\",  \r\n     grey:\"hsl(0, 0%, 93%)\",\r\n     darkGrey: \"hsl(0, 0%, 80%)\",\r\n     teal:\"hsl(180, 100%, 25%)\",\r\n     green:\"hsl(120, 100%, 25%)\",\r\n     red:\"hsl(0, 100%, 50%)\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 767\r\n    },\r\n};"],"sourceRoot":""}